# Generated by Django 5.0.2 on 2025-07-07 19:12

import core.models
import django.core.validators
import django.db.models.deletion
import shortuuid.django_fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('address_type', models.CharField(choices=[('billing', 'Billing'), ('shipping', 'Shipping')], default='shipping', max_length=10)),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('is_default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='CartOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('order_id', shortuuid.django_fields.ShortUUIDField(alphabet=None, editable=False, help_text='Unique identifier for the order', length=10, max_length=20, prefix='ord_', unique=True, verbose_name='Order ID')),
                ('invoice_no', models.CharField(blank=True, help_text='Unique invoice identifier', max_length=50, unique=True, verbose_name='Invoice Number')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('pending', 'Pending'), ('processing', 'Processing'), ('awaiting_payment', 'Awaiting Payment'), ('awaiting_dispatch', 'Awaiting Dispatch'), ('shipping', 'Shipping'), ('delivered', 'Delivered'), ('published', 'Published'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('returned', 'Returned'), ('refunded', 'Refunded'), ('failed', 'Failed'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('disputed', 'Disputed'), ('under_review', 'Under Review'), ('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='pending', help_text='Current status of the order', max_length=20, verbose_name='Order Status')),
                ('paid_status', models.BooleanField(default=False, help_text='Whether payment has been completed', verbose_name='Payment Status')),
                ('sub_total', models.DecimalField(decimal_places=2, default=0.0, help_text='Total before taxes and shipping', max_digits=12, verbose_name='Subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated tax for the order', max_digits=12, verbose_name='Tax Amount')),
                ('shipping_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Shipping charges for the order', max_digits=12, verbose_name='Shipping Cost')),
                ('total', models.DecimalField(decimal_places=2, default=0.0, help_text='Final amount to be paid (subtotal + tax + shipping)', max_digits=12, verbose_name='Order Total')),
                ('payment_method', models.CharField(blank=True, help_text='How the customer paid', max_length=50, null=True, verbose_name='Payment Method')),
                ('payment_date', models.DateTimeField(blank=True, help_text='When payment was completed', null=True, verbose_name='Payment Date')),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shipping_orders', to='core.address', verbose_name='Shipping Address')),
                ('user', models.ForeignKey(help_text='User who placed this order', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cid', shortuuid.django_fields.ShortUUIDField(alphabet=None, length=10, max_length=20, prefix='cat_', unique=True, verbose_name='Category ID')),
                ('title', models.CharField(help_text='Enter a unique category name', max_length=100, unique=True, verbose_name='Title')),
                ('image', models.ImageField(blank=True, help_text='Upload a category image (max 2MB)', null=True, upload_to='categories/', validators=[core.models.validate_image_size], verbose_name='Image')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this category should be treated as active.', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['title'],
                'indexes': [models.Index(fields=['title'], name='core_catego_title_4dd14c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('pid', shortuuid.django_fields.ShortUUIDField(alphabet=None, help_text='Unique product identifier', length=10, max_length=20, prefix='prod_', unique=True, verbose_name='Product ID')),
                ('sku', shortuuid.django_fields.ShortUUIDField(alphabet=None, editable=False, help_text='Stock Keeping Unit for inventory management', length=10, max_length=20, prefix='sku_', unique=True, verbose_name='SKU')),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the product name', max_length=150, unique=True, verbose_name='Slug')),
                ('title', models.CharField(help_text='Name of the product', max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='Detailed product description', null=True, verbose_name='Description')),
                ('specifications', models.TextField(blank=True, help_text='Technical specifications and features', null=True, verbose_name='Specifications')),
                ('image', models.ImageField(blank=True, help_text='Primary product image (max 2MB)', null=True, upload_to=core.models.user_directory_path, validators=[core.models.validate_image_size], verbose_name='Main Image')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Available items in inventory', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock Quantity')),
                ('price', models.DecimalField(decimal_places=2, help_text='Selling price of the product', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Current Price')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, help_text='Previous price before discount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Original Price')),
                ('status', models.CharField(choices=[('drafted', 'Drafted'), ('pending', 'Pending'), ('processing', 'Processing'), ('awaiting_payment', 'Awaiting Payment'), ('awaiting_dispatch', 'Awaiting Dispatch'), ('shipping', 'Shipping'), ('delivered', 'Delivered'), ('published', 'Published'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('returned', 'Returned'), ('refunded', 'Refunded'), ('failed', 'Failed'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('disputed', 'Disputed'), ('under_review', 'Under Review'), ('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='drafted', help_text='Current workflow status of the product', max_length=20, verbose_name='Status')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average customer rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Rating')),
                ('is_active', models.BooleanField(default=True, help_text='Product is visible in listings', verbose_name='Active')),
                ('is_published', models.BooleanField(default=False, help_text='Product is publicly available', verbose_name='Published')),
                ('digital', models.BooleanField(default=False, help_text='Product is digital (no shipping required)', verbose_name='Digital Product')),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured products section', verbose_name='Featured')),
                ('is_new', models.BooleanField(default=True, help_text='Mark as new product', verbose_name='New Arrival')),
                ('is_best_seller', models.BooleanField(default=False, help_text='Product is a top seller', verbose_name='Best Seller')),
                ('is_discounted', models.BooleanField(default=False, help_text='Product has active discount', verbose_name='Discounted')),
                ('is_on_sale', models.BooleanField(default=False, help_text='Product is currently on sale', verbose_name='On Sale')),
                ('is_returnable', models.BooleanField(default=True, help_text='Product can be returned', verbose_name='Returnable')),
                ('is_refundable', models.BooleanField(default=True, help_text='Product can be refunded', verbose_name='Refundable')),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by admin', verbose_name='Verified')),
                ('is_archived', models.BooleanField(default=False, help_text='Product is archived (not deleted)', verbose_name='Archived')),
                ('category', models.ForeignKey(help_text='Product category for organization', on_delete=django.db.models.deletion.CASCADE, related_name='category_products', to='core.category', verbose_name='Category')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Tags for product categorization and search', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(blank=True, help_text='User who created/owns this product', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Number of units (1-100)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Quantity')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of purchase', max_digits=10, verbose_name='Unit Price')),
                ('item_status', models.CharField(choices=[('drafted', 'Drafted'), ('pending', 'Pending'), ('processing', 'Processing'), ('awaiting_payment', 'Awaiting Payment'), ('awaiting_dispatch', 'Awaiting Dispatch'), ('shipping', 'Shipping'), ('delivered', 'Delivered'), ('published', 'Published'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('returned', 'Returned'), ('refunded', 'Refunded'), ('failed', 'Failed'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('disputed', 'Disputed'), ('under_review', 'Under Review'), ('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='pending', help_text='Current status of this item', max_length=20, verbose_name='Item Status')),
                ('user', models.ForeignKey(help_text='User who added this item', on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('order', models.ForeignKey(blank=True, help_text='Associated order', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.cartorder', verbose_name='Order')),
                ('product', models.ForeignKey(help_text='Product being ordered', on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='core.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload an additional product image (max 2MB)', upload_to=core.models.user_directory_path, validators=[core.models.validate_image_size], verbose_name='Image')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Date when this image was added', verbose_name='Date Added')),
                ('product', models.ForeignKey(help_text='Select the product this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='core.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(blank=True, help_text='Optional review text', null=True, verbose_name='Review')),
                ('rating', models.PositiveIntegerField(choices=[(1, '⭐★★★★'), (2, '⭐⭐★★★'), (3, '⭐⭐⭐★★'), (4, '⭐⭐⭐⭐★'), (5, '⭐⭐⭐⭐⭐')], default=5, help_text='Rating given by the user (1-5 stars)', verbose_name='Rating')),
                ('comment', models.TextField(blank=True, help_text='Optional review comment', null=True, verbose_name='Comment')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text='Date when the review was submitted', verbose_name='Date Added')),
                ('product', models.ForeignKey(help_text='Product being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.product', verbose_name='Product')),
                ('user', models.ForeignKey(help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('vid', shortuuid.django_fields.ShortUUIDField(alphabet=None, length=10, max_length=20, prefix='ven_', unique=True, verbose_name='Vendor ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Vendor Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone Number')),
                ('image', models.ImageField(blank=True, null=True, upload_to=core.models.user_directory_path, validators=[core.models.validate_image_size], verbose_name='Logo Image')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website URL')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Business Address')),
                ('shipping_on_time', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='yes', max_length=20, verbose_name='On-Time Shipping')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Customer Rating')),
                ('authentic_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Authenticity Rating')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this vendor has been verified by admin.', verbose_name='Is Verified')),
                ('slug', models.SlugField(blank=True, max_length=150, unique=True, verbose_name='Slug')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='vendor',
            field=models.ForeignKey(help_text='Business selling this product', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.vendor', verbose_name='Vendor'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text='Date when this item was added to the wishlist', verbose_name='Date Added')),
                ('product', models.ForeignKey(help_text='Product added to the wishlist', on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to='core.product', verbose_name='Product')),
                ('user', models.ForeignKey(help_text='User who owns this wishlist', on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Wishlist Item',
                'verbose_name_plural': 'Wishlist Items',
                'ordering': ['-date_added'],
            },
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('user', 'is_default'), name='unique_user_default_address'),
        ),
        migrations.AddIndex(
            model_name='cartorder',
            index=models.Index(fields=['order_id'], name='core_cartor_order_i_18ba3c_idx'),
        ),
        migrations.AddIndex(
            model_name='cartorder',
            index=models.Index(fields=['user'], name='core_cartor_user_id_9c770c_idx'),
        ),
        migrations.AddIndex(
            model_name='cartorder',
            index=models.Index(fields=['status'], name='core_cartor_status_2c1d65_idx'),
        ),
        migrations.AddIndex(
            model_name='cartorder',
            index=models.Index(fields=['paid_status'], name='core_cartor_paid_st_335d95_idx'),
        ),
        migrations.AddIndex(
            model_name='cartorder',
            index=models.Index(fields=['created_at'], name='core_cartor_created_3ea50e_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['order'], name='core_cartit_order_i_de902f_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['user'], name='core_cartit_user_id_c79c77_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['product'], name='core_cartit_product_70953e_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['item_status'], name='core_cartit_item_st_54cfe8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('order', 'product')},
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product'], name='core_produc_product_b0d6d1_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['date'], name='core_produc_date_15dfae_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product'], name='core_produc_product_36c312_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['user'], name='core_produc_user_id_597986_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['rating'], name='core_produc_rating_eb0280_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['date_added'], name='core_produc_date_ad_79a150_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['name'], name='core_vendor_name_91f195_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['rating'], name='core_vendor_rating_e9ac4a_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['is_verified'], name='core_vendor_is_veri_0e494c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['title'], name='core_produc_title_05e747_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='core_produc_slug_42f8f6_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='core_produc_price_c510fe_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='core_produc_is_acti_1d1aa8_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='core_produc_categor_784c92_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['vendor'], name='core_produc_vendor__852b67_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='core_produc_status_b17a10_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured'], name='core_produc_is_feat_ba4bd5_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['user'], name='core_wishli_user_id_b5812e_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['product'], name='core_wishli_product_f972a2_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['date_added'], name='core_wishli_date_ad_83fa51_idx'),
        ),
        migrations.AddConstraint(
            model_name='wishlist',
            constraint=models.UniqueConstraint(fields=('user', 'product'), name='unique_user_product_wishlist'),
        ),
    ]
